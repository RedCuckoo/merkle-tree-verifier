package merkle_tree

import (
	"crypto/sha256"
	"encoding/hex"
	"log"
	"math"
)

type MerkleTree struct {
	tree   [][][]byte
	height int
}

func (t *MerkleTree) Init(hashes [][]byte) *MerkleTree {
	height := calcHeight(len(hashes))

	*t = MerkleTree{tree: make([][][]byte, height), height: height}

	if t.height == 0 {
		return t
	}

	t.tree[0] = hashes

	for i := 1; i < t.height; i++ {
		//t.tree[i-1] = modifyOddLengthHashes(t.tree[i-1])
		t.tree[i] = calcLevel(t.tree[i-1])
	}

	return t
}

func (t *MerkleTree) GetProof(file int) *MerkleProof {

	proof := make([][]byte, t.height-1)
	direction := make([]bool, t.height-1)
	for level := 0; level < t.height-1; level++ {
		hashes := modifyOddLengthHashes(t.tree[level])
		if file%2 == 0 {
			direction[level] = true
			proof[level] = hashes[file+1]
		} else {
			direction[level] = false
			proof[level] = hashes[file-1]
		}
		file /= 2
	}

	return &MerkleProof{
		Proof:     proof,
		Direction: direction,
	}
}

func (t *MerkleTree) GetRoot() []byte {
	return t.tree[len(t.tree)-1][0]
}

func modifyOddLengthHashes(hashes [][]byte) [][]byte {
	if len(hashes)%2 == 1 {
		hashes = append(hashes, hashes[len(hashes)-1])
	}
	return hashes
}

func (t *MerkleTree) Print() {
	for _, hashes := range t.tree {
		for _, hash := range hashes {
			log.Println(hex.EncodeToString(hash))
		}
		log.Println()
	}
}

func calcLevel(hashes [][]byte) [][]byte {
	if len(hashes)%2 == 1 {
		hashes = append(hashes, hashes[len(hashes)-1])
	}

	result := make([][]byte, len(hashes)/2)
	hash := sha256.New()

	log.Println()
	log.Println()
	log.Println()
	for i := 0; i < len(hashes); i += 2 {
		hash.Reset()
		hash.Write(hashes[i])
		hash.Write(hashes[i+1])
		log.Println("merkle hasher one: " + hex.EncodeToString(hashes[i]))
		log.Println("merkle hasher two: " + hex.EncodeToString(hashes[i+1]))

		result[i/2] = hash.Sum(nil)
		log.Println("merkle hasher: " + hex.EncodeToString(result[i/2]))
	}

	return result
}

func calcHeight(amount int) int {
	if amount == 0 {
		return 0
	}
	if amount == 1 {
		return 2
	}
	return int(math.Ceil(math.Log10(float64(amount))/math.Log10(2))) + 1
}

func generateHashes() [][]byte {
	length := 320000000

	hashes := make([][]byte, length)

	for i := 0; i < length; i++ {
		hashes[i] = []byte{0x00}
	}

	return hashes
}

func main() {
	t := new(MerkleTree).Init([][]byte{
		[]byte{0x90, 0xfb, 0x0d, 0x9f, 0x50, 0x3f, 0xb8, 0x9c, 0x27, 0xb2, 0x9d, 0xaf, 0xd4, 0x41, 0x17, 0xf7, 0x0f, 0x6c, 0x19, 0xf0, 0x19, 0xa0, 0x3a, 0xfa, 0x50, 0x3e, 0x47, 0x2a, 0xd7, 0xd0, 0xe5, 0xc9},
		[]byte{0xb1, 0x8e, 0x89, 0xf7, 0x55, 0x39, 0x80, 0x28, 0x50, 0x4a, 0x3e, 0x5a, 0x8f, 0x33, 0x92, 0x70, 0x8b, 0xa5, 0x84, 0x26, 0x42, 0xc3, 0x5b, 0xef, 0x91, 0xf4, 0xed, 0xc1, 0x8d, 0xb9, 0x0b, 0x91},
		[]byte{0xb7, 0x8c, 0x8d, 0xc7, 0x8a, 0xb4, 0x94, 0x9d, 0x79, 0x7f, 0xf4, 0x22, 0x2e, 0x49, 0x43, 0x78, 0x6b, 0x69, 0x4e, 0xe7, 0xf7, 0x58, 0x57, 0x3a, 0x51, 0x44, 0x9b, 0x94, 0xe9, 0xf8, 0xce, 0x89},
		[]byte{0x2d, 0x2d, 0x34, 0x88, 0xa5, 0x8a, 0xc7, 0x9f, 0x0e, 0x5f, 0x62, 0x16, 0x49, 0x9c, 0x99, 0x45, 0x32, 0x3e, 0xa9, 0x7d, 0x1b, 0xb1, 0xd3, 0x95, 0xad, 0xe1, 0x2e, 0x4d, 0x44, 0x7d, 0x6b, 0xc7},
		//[]byte{0xa9, 0xfb, 0x28, 0xd0, 0x53, 0xd7, 0x14, 0x52, 0xe8, 0xe8, 0x47, 0x88, 0x7f, 0x5e, 0x0c, 0x68, 0x5e, 0x49, 0xef, 0xb1, 0x3b, 0x2b, 0x50, 0x91, 0x17, 0xdf, 0x8b, 0xad, 0x91, 0x0c, 0x0f, 0xd3},
		//[]byte{0xb3, 0x7e, 0xe5, 0x53, 0x20, 0x14, 0x8e, 0x0a, 0x45, 0x5f, 0x4b, 0x8e, 0xe1, 0x8f, 0xda, 0x1f, 0x7d, 0x51, 0x46, 0x6c, 0xa5, 0x0b, 0x2e, 0xf1, 0x4e, 0x0e, 0x09, 0x1e, 0x4d, 0xbc, 0x7a, 0x34},
		//[]byte{0x0c, 0x42, 0x90, 0x97, 0x00, 0x14, 0xc4, 0x1a, 0x8d, 0x07, 0xe9, 0xad, 0xef, 0xd0, 0xd1, 0xb0, 0x6b, 0x06, 0xb2, 0x1c, 0x56, 0x4d, 0x69, 0x71, 0x68, 0xa2, 0xdf, 0xa8, 0x47, 0x26, 0x2e, 0x61},
	})

	t.Print()
	log.Println()
	log.Println()
	log.Println()
	t.GetProof(1)
}
