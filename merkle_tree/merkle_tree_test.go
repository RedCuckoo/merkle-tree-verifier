package merkle_tree

import (
	"crypto/sha256"
	"encoding/hex"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestMerkleTreeInit(t *testing.T) {
	tree := new(MerkleTree).Init([][]byte{
		{0x90, 0xfb, 0x0d, 0x9f, 0x50, 0x3f, 0xb8, 0x9c, 0x27, 0xb2, 0x9d, 0xaf, 0xd4, 0x41, 0x17, 0xf7, 0x0f, 0x6c, 0x19, 0xf0, 0x19, 0xa0, 0x3a, 0xfa, 0x50, 0x3e, 0x47, 0x2a, 0xd7, 0xd0, 0xe5, 0xc9},
		{0xb1, 0x8e, 0x89, 0xf7, 0x55, 0x39, 0x80, 0x28, 0x50, 0x4a, 0x3e, 0x5a, 0x8f, 0x33, 0x92, 0x70, 0x8b, 0xa5, 0x84, 0x26, 0x42, 0xc3, 0x5b, 0xef, 0x91, 0xf4, 0xed, 0xc1, 0x8d, 0xb9, 0x0b, 0x91},
		{0xb7, 0x8c, 0x8d, 0xc7, 0x8a, 0xb4, 0x94, 0x9d, 0x79, 0x7f, 0xf4, 0x22, 0x2e, 0x49, 0x43, 0x78, 0x6b, 0x69, 0x4e, 0xe7, 0xf7, 0x58, 0x57, 0x3a, 0x51, 0x44, 0x9b, 0x94, 0xe9, 0xf8, 0xce, 0x89},
		{0x2d, 0x2d, 0x34, 0x88, 0xa5, 0x8a, 0xc7, 0x9f, 0x0e, 0x5f, 0x62, 0x16, 0x49, 0x9c, 0x99, 0x45, 0x32, 0x3e, 0xa9, 0x7d, 0x1b, 0xb1, 0xd3, 0x95, 0xad, 0xe1, 0x2e, 0x4d, 0x44, 0x7d, 0x6b, 0xc7},
		{0xa9, 0xfb, 0x28, 0xd0, 0x53, 0xd7, 0x14, 0x52, 0xe8, 0xe8, 0x47, 0x88, 0x7f, 0x5e, 0x0c, 0x68, 0x5e, 0x49, 0xef, 0xb1, 0x3b, 0x2b, 0x50, 0x91, 0x17, 0xdf, 0x8b, 0xad, 0x91, 0x0c, 0x0f, 0xd3},
		{0xb3, 0x7e, 0xe5, 0x53, 0x20, 0x14, 0x8e, 0x0a, 0x45, 0x5f, 0x4b, 0x8e, 0xe1, 0x8f, 0xda, 0x1f, 0x7d, 0x51, 0x46, 0x6c, 0xa5, 0x0b, 0x2e, 0xf1, 0x4e, 0x0e, 0x09, 0x1e, 0x4d, 0xbc, 0x7a, 0x34},
		{0x0c, 0x42, 0x90, 0x97, 0x00, 0x14, 0xc4, 0x1a, 0x8d, 0x07, 0xe9, 0xad, 0xef, 0xd0, 0xd1, 0xb0, 0x6b, 0x06, 0xb2, 0x1c, 0x56, 0x4d, 0x69, 0x71, 0x68, 0xa2, 0xdf, 0xa8, 0x47, 0x26, 0x2e, 0x61},
	})

	require.Equal(t, 4, tree.height)
	require.Equal(t, "05824df2c67264fc34928a20c6994d10522d69b5a55c09e4be6d95dacc81972e", hex.EncodeToString(tree.GetRoot()))
}

func TestMerkleTreeInitNoHashes(t *testing.T) {
	tree := new(MerkleTree).Init([][]byte{})

	require.Equal(t, 0, tree.height)
}

func TestMerkleTreeInitOneHash(t *testing.T) {
	tree := new(MerkleTree).Init([][]byte{
		{0x90, 0xfb, 0x0d, 0x9f, 0x50, 0x3f, 0xb8, 0x9c, 0x27, 0xb2, 0x9d, 0xaf, 0xd4, 0x41, 0x17, 0xf7, 0x0f, 0x6c, 0x19, 0xf0, 0x19, 0xa0, 0x3a, 0xfa, 0x50, 0x3e, 0x47, 0x2a, 0xd7, 0xd0, 0xe5, 0xc9},
	})

	require.Equal(t, tree.height, 2)

	hasher := sha256.New()
	hasher.Write([]byte{0x90, 0xfb, 0x0d, 0x9f, 0x50, 0x3f, 0xb8, 0x9c, 0x27, 0xb2, 0x9d, 0xaf, 0xd4, 0x41, 0x17, 0xf7, 0x0f, 0x6c, 0x19, 0xf0, 0x19, 0xa0, 0x3a, 0xfa, 0x50, 0x3e, 0x47, 0x2a, 0xd7, 0xd0, 0xe5, 0xc9})
	hasher.Write([]byte{0x90, 0xfb, 0x0d, 0x9f, 0x50, 0x3f, 0xb8, 0x9c, 0x27, 0xb2, 0x9d, 0xaf, 0xd4, 0x41, 0x17, 0xf7, 0x0f, 0x6c, 0x19, 0xf0, 0x19, 0xa0, 0x3a, 0xfa, 0x50, 0x3e, 0x47, 0x2a, 0xd7, 0xd0, 0xe5, 0xc9})
	root := hasher.Sum(nil)

	require.Equal(t, root, tree.GetRoot())
}

func TestMerkleTreeProof(t *testing.T) {
	tree := new(MerkleTree).Init([][]byte{
		{0x90, 0xfb, 0x0d, 0x9f, 0x50, 0x3f, 0xb8, 0x9c, 0x27, 0xb2, 0x9d, 0xaf, 0xd4, 0x41, 0x17, 0xf7, 0x0f, 0x6c, 0x19, 0xf0, 0x19, 0xa0, 0x3a, 0xfa, 0x50, 0x3e, 0x47, 0x2a, 0xd7, 0xd0, 0xe5, 0xc9},
		{0xb1, 0x8e, 0x89, 0xf7, 0x55, 0x39, 0x80, 0x28, 0x50, 0x4a, 0x3e, 0x5a, 0x8f, 0x33, 0x92, 0x70, 0x8b, 0xa5, 0x84, 0x26, 0x42, 0xc3, 0x5b, 0xef, 0x91, 0xf4, 0xed, 0xc1, 0x8d, 0xb9, 0x0b, 0x91},
		{0xb7, 0x8c, 0x8d, 0xc7, 0x8a, 0xb4, 0x94, 0x9d, 0x79, 0x7f, 0xf4, 0x22, 0x2e, 0x49, 0x43, 0x78, 0x6b, 0x69, 0x4e, 0xe7, 0xf7, 0x58, 0x57, 0x3a, 0x51, 0x44, 0x9b, 0x94, 0xe9, 0xf8, 0xce, 0x89},
		{0x2d, 0x2d, 0x34, 0x88, 0xa5, 0x8a, 0xc7, 0x9f, 0x0e, 0x5f, 0x62, 0x16, 0x49, 0x9c, 0x99, 0x45, 0x32, 0x3e, 0xa9, 0x7d, 0x1b, 0xb1, 0xd3, 0x95, 0xad, 0xe1, 0x2e, 0x4d, 0x44, 0x7d, 0x6b, 0xc7},
		{0xa9, 0xfb, 0x28, 0xd0, 0x53, 0xd7, 0x14, 0x52, 0xe8, 0xe8, 0x47, 0x88, 0x7f, 0x5e, 0x0c, 0x68, 0x5e, 0x49, 0xef, 0xb1, 0x3b, 0x2b, 0x50, 0x91, 0x17, 0xdf, 0x8b, 0xad, 0x91, 0x0c, 0x0f, 0xd3},
		{0xb3, 0x7e, 0xe5, 0x53, 0x20, 0x14, 0x8e, 0x0a, 0x45, 0x5f, 0x4b, 0x8e, 0xe1, 0x8f, 0xda, 0x1f, 0x7d, 0x51, 0x46, 0x6c, 0xa5, 0x0b, 0x2e, 0xf1, 0x4e, 0x0e, 0x09, 0x1e, 0x4d, 0xbc, 0x7a, 0x34},
		{0x0c, 0x42, 0x90, 0x97, 0x00, 0x14, 0xc4, 0x1a, 0x8d, 0x07, 0xe9, 0xad, 0xef, 0xd0, 0xd1, 0xb0, 0x6b, 0x06, 0xb2, 0x1c, 0x56, 0x4d, 0x69, 0x71, 0x68, 0xa2, 0xdf, 0xa8, 0x47, 0x26, 0x2e, 0x61},
	})

	require.Equal(t, tree.height, 4)

	proof := tree.GetProof(3)
	require.Equal(t, 3, len(proof.Proof))
	require.Equal(t, 3, len(proof.Direction))
}
